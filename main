import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

VIX = pd.read_csv(r".\VIX_History.csv", parse_dates=['DATE'])
TenYear = pd.read_excel(r".\10y.xlsx", parse_dates=['Date'])
SOFR = pd.read_excel(r".\SOFR.xlsx", parse_dates=['Effective Date'])
GDP = pd.read_excel(r".\GDP.xlsx", parse_dates=['GDP Final*'])
GNI = pd.read_excel(r".\GNI.xlsx", parse_dates=['Period'])
GNP = pd.read_excel(r".\GNP.xlsx", parse_dates=['Period'])
Unemployment = pd.read_excel(r".\Unemployment.xlsx", parse_dates=['Original Release Date'])
CPI = pd.read_excel(r".\CPI.xlsx", parse_dates=['Original Release Date'])
PPI = pd.read_excel(r".\PPI.xlsx", parse_dates=['Original Release Date'])

#here get data into the right form

def correlationfunction(data1, data2, col1, col2):
    merged_data = pd.merge_asof(data1.sort_values('Date'),
                                data2.sort_values('Date'),
                                on='Date')
    correlation = merged_data[[col1, col2]].corr().iloc[0, 1]
    return correlation

def fit_garch_model(returns):
    returns = returns.dropna()
    model = arch_model(returns, vol='Garch', p=1, q=1)
    garch_result = model.fit(disp='off')
    forecast = garch_result.forecast(horizon=1)

    return garch_result

def main():
    correlationfunction()

    #principalcomponentanalysis

    #graph

    #heatmap

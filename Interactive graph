import plotly.express as px

TenYear = pd.read_csv(r".\DGS10.csv", parse_dates=['observation_date'])

VIX.rename(columns={'DATE': 'Date', 'CLOSE': 'Value'}, inplace=True)
TenYear.rename(columns={'observation_date': 'Date', 'DGS10': 'Value'}, inplace=True)
SOFR.rename(columns={'Effective Date': 'Date', 'Rate (%)': 'Value'}, inplace=True)
GDP.rename(columns={'GDP Final*': 'Date', 'GDP Final*.1': 'Value'}, inplace=True)
GNI.rename(columns={'Period': 'Date'}, inplace=True)
GNP.rename(columns={'Period': 'Date'}, inplace=True)
Unemployment.rename(columns={'Original Release Date': 'Date', 'First Release': 'Value'}, inplace=True)
CPI.rename(columns={'Original Release Date': 'Date', 'First Release': 'Value'}, inplace=True)
PPI.rename(columns={'Original Release Date': 'Date'}, inplace=True)
VIX = VIX[VIX['Date'] >= '2015-01-01']

#PPI
def change_calculation(df):
    df['Value'] = (df['First Release'] - df['First Release'].shift(-1))
    df['Value'] = df['Value'].fillna(0)
    return df

PPI = change_calculation(PPI)

#GNI
def pct_change(df):
    df['Value'] = ((df['aUSN0ZGFT'] / df['aUSN0ZGFT'].shift(-1)) - 1) * 100
    df['Value'] = df['Value'].fillna(0)
    return df

GNI = pct_change(GNI)

#GNP
def pct_changee(df):
    df['Value'] = ((df['aUSGNP/A'] / df['aUSGNP/A'].shift(-4)) - 1) * 100
    df['Value'] = df['Value'].fillna(0)
    return df

GNP = pct_changee(GNP)



#graph
def plot_timeseries(dfs, titles):
    fig = go.Figure()
    for i, (df, title) in enumerate(zip(dfs, titles)):
        if i == len(dfs) - 1:
            fig.add_trace(go.Scatter(x=df['Date'], y=df['Value'], mode='lines', name=title, yaxis='y2'))
        else:
            fig.add_trace(go.Scatter(x=df['Date'], y=df['Value'], mode='lines', name=title))
    
    fig.update_layout(
        title='Time Series Plot',
        xaxis_title='Date',
        yaxis_title='Value',
        yaxis2=dict(overlaying='y', side='right'),
        xaxis=dict(
            rangeslider=dict(visible=True),
            rangeselector=dict(
                buttons=[
                    dict(count=1, label='1m', step='month', stepmode='backward'),
                    dict(count=6, label='6m', step='month', stepmode='backward'),
                    dict(count=1, label='1y', step='year', stepmode='backward'),
                    dict(count=5, label='5y', step='year', stepmode='backward'),
                    dict(step='all')
                ]
            )
        ),
        yaxis=dict(autorange=True)  #Does not work for some reason
    )
    
    fig.show()

plot_timeseries([TenYear, SOFR, CPI, PPI, Unemployment, GDP, GNP, GNI, VIX], ["US 10y yield", "SOFR", "CPI", "PPI", "Unemployment", "GDP", "GNP", "GNI", "VIX"])